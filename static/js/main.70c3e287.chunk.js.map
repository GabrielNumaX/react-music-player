{"version":3,"sources":["PlayerLeft.js","PlayerRight.js","App.js","serviceWorker.js","index.js"],"names":["PlayerLeft","props","className","src","albumCover","alt","altText","ref","audioRef","onPlay","toggleButton","onPause","onTimeUpdate","progressBar","onEnded","onTrackEnd","audioSource","type","autoPlay","onClick","progressBarUpdate","randomTrack","prevTrack","nextTrack","onRepeat","track","artist","PlayerRight","onListClick","listImage","App","state","trackList","currentTrack","currentId","objPos","playing","repeat","random","randomId","onPlayClicked","audio","document","querySelector","paused","play","setState","pause","onTrackEnded","pos","file","console","log","parseInt","length","id","playBtn","pauseBtn","classList","add","remove","percent","currentTime","duration","style","flexBasis","e","progress","time","nativeEvent","offsetX","offsetWidth","filter","item","toString","randomSameCheck","Math","floor","boolean","repeatBtn","color","listClick","axios","get","then","response","data","catch","error","alert","this","audioElement","randomBtn","ListPlayer","map","key","position","basename","process","el","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.70c3e287.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Player.css';\r\n\r\nconst PlayerLeft = (props) => {\r\n\r\n    // console.log(props);\r\n\r\n    return(\r\n\r\n        <aside className=\"Left\">\r\n            <img className=\"AlbumImg\" src={props.albumCover} \r\n                alt={props.altText}/>\r\n\r\n            <audio\r\n                ref={props.audioRef} \r\n                onPlay={props.toggleButton} \r\n                onPause={props.toggleButton} \r\n                onTimeUpdate={props.progressBar}\r\n                onEnded={props.onTrackEnd}\r\n                src={props.audioSource} \r\n                type=\"audio/mpeg\"\r\n                autoPlay={false}>\r\n\r\n                Your browser does not support the audio element.\r\n            </audio> \r\n\r\n            <div className=\"TrackLength\" onClick={props.progressBarUpdate}>\r\n                <div className=\"TrackLengthFilled\" >\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"Controls\">\r\n                <i className=\"fas fa-random\" onClick={props.randomTrack}></i>\r\n                \r\n                <i className=\"fas fa-step-backward\" onClick={props.prevTrack}></i>\r\n                <i className=\"fas fa-play\" onClick={props.onPlay}></i>\r\n                <i className=\"inactiveBtn fas fa-pause\" onClick={props.onPlay}></i>\r\n                <i className=\"fas fa-step-forward\" onClick={props.nextTrack}></i>\r\n\r\n                <i className=\"fas fa-redo-alt\" onClick={props.onRepeat}></i>\r\n            </div>\r\n\r\n            <h2>{props.track}</h2>\r\n            <h3>{props.artist}</h3>\r\n\r\n        </aside>\r\n\r\n    );\r\n}\r\n\r\nexport default PlayerLeft;","import React from 'react';\r\n\r\nimport './Player.css';\r\n\r\n// You could either do onClick={() => props.headlinesClicked(); props.getData()}, \r\n//       or extract it to a new function/method that does both calls, \r\n//       then invoke it with onClick={myNewMethod} or onClick={() => myNewMethod()}.\r\n\r\n\r\nconst PlayerRight = (props) => {\r\n\r\n    return(\r\n\r\n            <div className=\"Card\" onClick={() => props.onListClick()}>\r\n\r\n                <img src={props.listImage}\r\n                    alt={props.altText}></img>\r\n\r\n                <div className=\"CardTitle\">\r\n                    <h4>{props.track}</h4>\r\n                    <h5>{props.artist}</h5>\r\n                </div>\r\n            </div>\r\n\r\n    );\r\n}\r\n\r\nexport default PlayerRight;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { HashRouter} from 'react-router-dom';\r\n\r\nimport PlayerLeft from './PlayerLeft';\r\nimport PlayerRight from './PlayerRight';\r\n\r\nimport './App.css';\r\nimport './Player.css'\r\n\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n        trackList: [],\r\n        currentTrack: {},\r\n        currentId: '',\r\n        objPos: 0,\r\n        playing: false,\r\n        repeat: false,\r\n        random: false,\r\n        randomTrack: {},\r\n        randomId: '',\r\n      }\r\n\r\n\r\n  componentDidMount() {\r\n\r\n    axios.get('https://5dd1894f15bbc2001448d28e.mockapi.io/playlist')\r\n    .then(response => {\r\n      this.setState({\r\n        trackList: response.data, \r\n        currentTrack: response.data[0],\r\n        currentId: response.data[0].id});\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n      alert(\"There's been an ERROR reload page\")\r\n    })\r\n  }\r\n\r\n  componentDidUpdate() {\r\n\r\n    console.log('componentDidUpdate');\r\n    \r\n    if(this.state.playing) {\r\n\r\n      this.audioElement.play();\r\n    }\r\n\r\n    // console.log('random' ,this.state.random);\r\n\r\n    console.log('repe bef ' ,this.state.repeat);\r\n\r\n    \r\n\r\n    // console.log('repe af ' ,this.state.repeat);\r\n\r\n\r\n\r\n    //try did to KEEP button active but it's calling twice and deactivating it\r\n    // if(this.state.random){\r\n    //   this.randomTrack(this.state.currentId);\r\n    // }\r\n\r\n    //try did to KEEP button active but it's calling twice and deactivating it\r\n    // if(this.state.repeat){\r\n    //   this.repeat(this.state.currentId);\r\n    // }\r\n    \r\n  }\r\n\r\n  onPlayClicked = () => {\r\n\r\n    const audio = document.querySelector('audio');\r\n\r\n    const playState = true;\r\n\r\n    if(audio.paused) {\r\n\r\n      audio.play();\r\n\r\n      this.setState({playing: playState});\r\n   }\r\n   else {\r\n \r\n     audio.pause();\r\n\r\n     this.setState({playing: !playState});\r\n\r\n   }\r\n \r\n    // console.log(audio.autoplay);\r\n    // audio.autoplay = true;\r\n    // console.log(audio.autoplay);\r\n } // end function onPlay\r\n\r\n\r\n/* pos is id of current track, \r\nchecks if random-> sets track and id to randomTrack and id\r\nif NO random -> checks if last obj of array->  sets track and id to first track and id\r\n                                               from trackList\r\n                       if NO -> sets track and id to trackList[pos+1]\r\n*/\r\n onTrackEnded = (pos) => {\r\n\r\n  // console.log('onTrackEnded')\r\n\r\n  // console.log(this.state.random);\r\n\r\n  const audio = document.querySelector('audio');\r\n\r\n  // console.log(audio.autoplay);\r\n\r\n  if(this.state.random){\r\n\r\n    this.setState({\r\n      currentTrack: this.state.randomTrack,\r\n      currentId: this.state.randomId\r\n    });\r\n\r\n    audio.src = this.state.currentTrack.file;\r\n\r\n  }\r\n\r\n  else if(this.state.random && this.state.currentTrack === this.state.randomTrack){\r\n\r\n    this.randomTrack(this.state.currentId);\r\n  }\r\n\r\n\r\n  if(this.state.repeat) {\r\n    console.log('onEnded');\r\n    this.repeat(true);\r\n\r\n    console.log(this.state.repeat);\r\n  }\r\n  // if(this.state.repeat){\r\n\r\n  //   console.log('onEnded')\r\n\r\n  //   this.repeat();\r\n\r\n  // }\r\n\r\n\r\n  if(parseInt(pos) === this.state.trackList.length) {\r\n\r\n    this.setState({\r\n      currentTrack: this.state.trackList[0],\r\n      currentId: this.state.trackList[0].id\r\n    });\r\n\r\n    audio.src = this.state.currentTrack.file;\r\n\r\n  }    \r\n  else {\r\n\r\n    // console.log('inside else random FALSE');\r\n    // console.log('pos before '+ pos);\r\n    // console.log(this.state.trackList[pos].track);\r\n\r\n    pos = parseInt(pos)\r\n\r\n    //I was setting the index of array with id \r\n    //and it was NOT returning the next Obj so \r\n    //I'm just commenting next line and using id to set next index \r\n\r\n    // pos++;\r\n\r\n    this.setState({\r\n      currentTrack: this.state.trackList[pos],\r\n      currentId: this.state.trackList[pos].id\r\n    });\r\n\r\n    audio.src = this.state.currentTrack.file;\r\n  }\r\n\r\n  // if(this.state.repeat){\r\n\r\n  //   this.setState({\r\n  //     currentTrack: this.state.currentTrack,\r\n  //     currentId: this.state.currrentId\r\n  //   })\r\n\r\n  // }\r\n    // this.audioElement.current.play();\r\n    // console.log(this.audioElement.current);\r\n    // console.log(this.audioElement);\r\n    //autoplay get printed to true but DOES NOT autoplay next song\r\n    // audio.autoplay = true;\r\n    // console.log(audio.autoplay);\r\n\r\n    // audio.load();\r\n    // audio.play();\r\n    //this prints a pending Promise\r\n    // console.log(audio.play());\r\n\r\n } //end function onTrackEnded\r\n\r\n\r\n //this is passed to audio onPlay onPause but here should be passed to the button instead \r\n //or could be set on audio Play Pause to call function TRY!!!\r\n  toggleButton = () => {\r\n    const audio = document.querySelector('audio');\r\n\r\n    let playBtn = document.querySelector('.fa-play');\r\n    let pauseBtn = document.querySelector('.fa-pause');\r\n\r\n    if(audio.paused){\r\n      // console.log(pauseBtn);\r\n      pauseBtn.classList.add('inactiveBtn');\r\n      playBtn.classList.remove('inactiveBtn');\r\n    }\r\n    else {\r\n      // console.log(pauseBtn);\r\n      // console.log(playBtn);\r\n      pauseBtn.classList.remove('inactiveBtn');\r\n      playBtn.classList.add('inactiveBtn');\r\n\r\n    }\r\n  }\r\n\r\n  progressBar = () => {\r\n\r\n    const audio = document.querySelector('audio');\r\n    const progressBar = document.querySelector('.TrackLengthFilled');\r\n    const percent = (audio.currentTime / audio.duration) * 100;\r\n\r\n    progressBar.style.flexBasis = `${percent}%`;\r\n  }\r\n\r\n  progressBarUpdate = (e) => {\r\n\r\n    // console.log(e);\r\n\r\n    const audio = document.querySelector('audio');\r\n    const progress = document.querySelector('.TrackLength')\r\n  \r\n    const time = (e.nativeEvent.offsetX / progress.offsetWidth) * audio.duration;\r\n\r\n    audio.currentTime = time;\r\n  \r\n  }\r\n\r\n  nextTrack = (pos) => {\r\n\r\n    if(parseInt(pos) === this.state.trackList.length){\r\n      pos = 1;\r\n    }\r\n    else {\r\n      pos++;\r\n    }\r\n\r\n    const nextTrack = this.state.trackList.filter(item => {\r\n      return item.id === pos.toString();\r\n    })\r\n\r\n    pos = parseInt(pos);\r\n\r\n    // console.log(nextTrack[0]);\r\n    // console.log(nextTrack[0].id);\r\n\r\n    this.setState({\r\n      currentTrack: nextTrack[0],\r\n      currentId: nextTrack[0].id\r\n    })\r\n  }\r\n\r\n prevTrack = (pos) => {\r\n\r\n    if(parseInt(pos) === 1){\r\n      pos = this.state.trackList.length;\r\n    }\r\n    else {\r\n      pos--;\r\n    }\r\n\r\n    const prevTrack = this.state.trackList.filter(item => {\r\n      return item.id === pos.toString();\r\n    })\r\n\r\n    this.setState({\r\n      currentTrack: prevTrack[0],\r\n      currentId: prevTrack[0].id\r\n    })\r\n  }\r\n\r\n\r\n  //creates random id between given id\r\n  randomSameCheck = (pos) => {\r\n\r\n    pos = parseInt(pos)\r\n\r\n    //between 7 & 0 for index of randomTrack()\r\n    const random = Math.floor(Math.random() * (this.state.trackList.length - 1 + 0)) + 1;\r\n\r\n    // console.log('inside randomSame ' + random)\r\n\r\n    if(random === pos){\r\n\r\n      // console.log('inside randomSame if ' + random)\r\n\r\n\r\n      this.randomSameCheck(pos)\r\n    }\r\n    else {\r\n\r\n      // console.log('inside randomSame else ' + random)\r\n\r\n      pos = random;\r\n    }\r\n\r\n    return pos;\r\n\r\n  }\r\n\r\n  randomTrack(pos) {\r\n\r\n    //it cost me a while to realize this IMPORTANT\r\n    pos = this.randomSameCheck(pos)\r\n\r\n    // console.log('inside random '+ pos);\r\n\r\n    // console.log(pos)\r\n\r\n    this.setState( {\r\n        randomTrack: this.state.trackList[pos],\r\n        randomId: this.state.trackList[pos].id\r\n    });\r\n\r\n    const randomBtn = document.querySelector('.fa-random');\r\n\r\n    if(!this.state.random) {\r\n\r\n      //color it's changing and getting printed\r\n      //but NOT changes are applied\r\n      randomBtn.style.color = 'black';\r\n\r\n      // console.log(randomBtn.style.color);\r\n\r\n      this.setState({random: true});\r\n  \r\n    }\r\n    else {\r\n\r\n      randomBtn.style.color = 'whitesmoke';\r\n\r\n      this.setState({random: false})\r\n    }\r\n\r\n  } //end function random\r\n\r\n  repeat = (boolean) => {\r\n\r\n    const repeatBtn = document.querySelector('.fa-redo-alt');\r\n\r\n    const repState = true;\r\n\r\n    if(boolean === false){\r\n\r\n      // console.log('repeat if -> false')\r\n\r\n      this.setState({repeat: repState});\r\n\r\n      repeatBtn.style.color = 'black';\r\n\r\n    }\r\n    else {\r\n\r\n      // console.log('repeat if -> true')\r\n\r\n      this.setState({repeat: !repState});\r\n\r\n      repeatBtn.style.color = 'whitesmoke';\r\n    }\r\n\r\n  } //end function repeat\r\n\r\n  listClick = (pos) => {\r\n\r\n    const audio = document.querySelector('audio');\r\n\r\n    this.setState({\r\n        currentTrack: this.state.trackList[pos],\r\n        currentId: this.state.trackList[pos].id,\r\n        playing: true\r\n    })\r\n\r\n    audio.play();\r\n  }\r\n  \r\n  render() {\r\n\r\n    const ListPlayer = this.state.trackList.map((item, pos) => {\r\n\r\n      \r\n      return(\r\n\r\n        <PlayerRight key={item.id}\r\n                    onListClick={() => {this.listClick(pos)}}\r\n                    position={pos}\r\n                    listImage={item.albumCover}\r\n                    altText={item.track}\r\n                    track={item.track}\r\n                    artist={item.artist} />\r\n\r\n      );\r\n    })\r\n\r\n    return (\r\n      <HashRouter basename={process.env.PUBLIC_URL}>\r\n      \r\n        <div className=\"App\">\r\n\r\n            {\r\n            // this.state.trackList !== undefined || this.state.trackList !== [] || this.state.trackList !== null ?\r\n\r\n            this.state.trackList !== [] ?\r\n\r\n            <main className=\"Player\">\r\n\r\n              <PlayerLeft audioRef={(el) => {this.audioElement = el}}\r\n                          key={this.state.currentTrack.id}\r\n                          id={this.state.currentTrack.id} \r\n                          albumCover={this.state.currentTrack.albumCover}\r\n                          altText={this.state.currentTrack.track}\r\n                          toggleButton={this.toggleButton}\r\n                          progressBar={this.progressBar}\r\n                          progressBarUpdate={(e) => this.progressBarUpdate(e)}\r\n                          nextTrack={() => this.nextTrack(this.state.currentId)}\r\n                          prevTrack={() => this.prevTrack(this.state.currentId)}\r\n                          randomTrack={() => this.randomTrack(this.state.currentId)}\r\n                          audioSource={this.state.currentTrack.file}\r\n                          onPlay={this.onPlayClicked}\r\n                          onTrackEnd={() => this.onTrackEnded(this.state.currentId)}\r\n                          onRepeat={() => this.repeat(this.state.repeat)}\r\n                          track={this.state.currentTrack.track}\r\n                          artist={this.state.currentTrack.artist} />\r\n            \r\n\r\n              <aside className=\"Right\"> \r\n                {ListPlayer}\r\n              </aside>\r\n            </main>\r\n\r\n            :\r\n\r\n           \r\n\r\n            <main className=\"Player\">\r\n              <h1 className=\"Loading\">Playlist Loading...</h1>\r\n            </main>         \r\n\r\n            \r\n          }\r\n\r\n        </div>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}